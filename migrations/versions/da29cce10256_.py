"""empty message

Revision ID: da29cce10256
Revises: 
Create Date: 2022-04-24 00:33:26.250563

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'da29cce10256'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('company_category',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=120), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_company_category'))
    )
    with op.batch_alter_table('company_category', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_company_category_name'), ['name'], unique=False)

    op.create_table('cores',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(length=120), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_cores'))
    )
    with op.batch_alter_table('cores', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_cores_name'), ['name'], unique=False)

    op.create_table('currency',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=60), nullable=True),
    sa.Column('code', sa.String(length=60), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_currency'))
    )
    with op.batch_alter_table('currency', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_currency_code'), ['code'], unique=False)
        batch_op.create_index(batch_op.f('ix_currency_name'), ['name'], unique=True)

    op.create_table('database',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=128), nullable=True),
    sa.Column('creation_date', sa.DateTime(), nullable=True),
    sa.Column('is_activated', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_database'))
    )
    with op.batch_alter_table('database', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_database_name'), ['name'], unique=False)

    op.create_table('instruction_set',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(length=120), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_instruction_set'))
    )
    with op.batch_alter_table('instruction_set', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_instruction_set_name'), ['name'], unique=False)

    op.create_table('memory',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(length=120), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_memory'))
    )
    with op.batch_alter_table('memory', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_memory_name'), ['name'], unique=False)

    op.create_table('memory_type',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(length=120), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_memory_type'))
    )
    with op.batch_alter_table('memory_type', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_memory_type_name'), ['name'], unique=False)

    op.create_table('module_category',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=128), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_module_category'))
    )
    op.create_table('partner_position',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(length=120), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_partner_position'))
    )
    with op.batch_alter_table('partner_position', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_partner_position_name'), ['name'], unique=True)

    op.create_table('partner_role',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=120), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_partner_role'))
    )
    with op.batch_alter_table('partner_role', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_partner_role_name'), ['name'], unique=False)

    op.create_table('partner_tag',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(length=120), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_partner_tag'))
    )
    with op.batch_alter_table('partner_tag', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_partner_tag_name'), ['name'], unique=True)

    op.create_table('partner_title',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(length=120), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_partner_title'))
    )
    with op.batch_alter_table('partner_title', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_partner_title_name'), ['name'], unique=True)

    op.create_table('processor',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(length=120), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_processor'))
    )
    with op.batch_alter_table('processor', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_processor_name'), ['name'], unique=False)

    op.create_table('processor_speed',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(length=120), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_processor_speed'))
    )
    with op.batch_alter_table('processor_speed', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_processor_speed_name'), ['name'], unique=False)

    op.create_table('product_manufacturer',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_product_manufacturer'))
    )
    op.create_table('product_model',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_product_model'))
    )
    op.create_table('purchase_filters',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('index', sa.Integer(), nullable=True),
    sa.Column('name', sa.String(length=120), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_purchase_filters'))
    )
    with op.batch_alter_table('purchase_filters', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_purchase_filters_index'), ['index'], unique=True)
        batch_op.create_index(batch_op.f('ix_purchase_filters_name'), ['name'], unique=True)

    op.create_table('purchase_status',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(length=120), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_purchase_status'))
    )
    with op.batch_alter_table('purchase_status', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_purchase_status_name'), ['name'], unique=True)

    op.create_table('recurring_plan',
    sa.Column('id', sa.Integer(), autoincrement=False, nullable=False),
    sa.Column('name', sa.String(length=120), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_recurring_plan'))
    )
    op.create_table('stage',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=120), nullable=True),
    sa.Column('position', sa.Integer(), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_stage')),
    sa.UniqueConstraint('position', name=op.f('uq_stage_position'))
    )
    with op.batch_alter_table('stage', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_stage_name'), ['name'], unique=True)

    op.create_table('storage',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(length=120), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_storage'))
    )
    with op.batch_alter_table('storage', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_storage_name'), ['name'], unique=False)

    op.create_table('uom_category',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(length=120), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_uom_category'))
    )
    op.create_table('company',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=120), nullable=True),
    sa.Column('domain_name', sa.String(length=120), nullable=True),
    sa.Column('report_header', sa.Text(), nullable=True),
    sa.Column('report_footer', sa.Text(), nullable=True),
    sa.Column('logo', sa.String(length=200), nullable=True),
    sa.Column('registered_on', sa.DateTime(), nullable=True),
    sa.Column('database_id', sa.Integer(), nullable=True),
    sa.Column('street', sa.String(length=100), nullable=True),
    sa.Column('street2', sa.String(length=100), nullable=True),
    sa.Column('city', sa.String(length=100), nullable=True),
    sa.Column('county', sa.String(length=100), nullable=True),
    sa.Column('country', sa.String(length=100), nullable=True),
    sa.Column('postal_address', sa.String(length=100), nullable=True),
    sa.Column('postal_code', sa.String(length=100), nullable=True),
    sa.Column('email', sa.String(length=120), nullable=True),
    sa.Column('mobile_no', sa.String(length=120), nullable=True),
    sa.Column('website', sa.String(length=120), nullable=True),
    sa.Column('category_id', sa.Integer(), nullable=True),
    sa.Column('currency', sa.String(length=30), nullable=True),
    sa.ForeignKeyConstraint(['category_id'], ['company_category.id'], name=op.f('fk_company_category_id_company_category')),
    sa.ForeignKeyConstraint(['database_id'], ['database.id'], name=op.f('fk_company_database_id_database')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_company'))
    )
    with op.batch_alter_table('company', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_company_domain_name'), ['domain_name'], unique=True)
        batch_op.create_index(batch_op.f('ix_company_email'), ['email'], unique=True)
        batch_op.create_index(batch_op.f('ix_company_mobile_no'), ['mobile_no'], unique=False)
        batch_op.create_index(batch_op.f('ix_company_name'), ['name'], unique=False)
        batch_op.create_index(batch_op.f('ix_company_website'), ['website'], unique=False)

    op.create_table('country',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=60), nullable=True),
    sa.Column('code', sa.String(length=60), nullable=True),
    sa.Column('currency_id', sa.Integer(), nullable=True),
    sa.Column('calling_code', sa.String(length=120), nullable=True),
    sa.Column('currency_name', sa.String(length=60), nullable=True),
    sa.Column('currency_alphabetic_code', sa.String(length=60), nullable=True),
    sa.Column('currency_numeric_code', sa.Integer(), nullable=True),
    sa.Column('languages', sa.String(length=120), nullable=True),
    sa.ForeignKeyConstraint(['currency_id'], ['currency.id'], name=op.f('fk_country_currency_id_currency')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_country'))
    )
    with op.batch_alter_table('country', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_country_calling_code'), ['calling_code'], unique=False)
        batch_op.create_index(batch_op.f('ix_country_code'), ['code'], unique=True)
        batch_op.create_index(batch_op.f('ix_country_currency_alphabetic_code'), ['currency_alphabetic_code'], unique=False)
        batch_op.create_index(batch_op.f('ix_country_currency_name'), ['currency_name'], unique=False)
        batch_op.create_index(batch_op.f('ix_country_currency_numeric_code'), ['currency_numeric_code'], unique=False)
        batch_op.create_index(batch_op.f('ix_country_languages'), ['languages'], unique=False)
        batch_op.create_index(batch_op.f('ix_country_name'), ['name'], unique=True)

    op.create_table('module',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('technical_name', sa.String(length=128), nullable=True),
    sa.Column('official_name', sa.String(length=128), nullable=True),
    sa.Column('bp_name', sa.String(length=128), nullable=True),
    sa.Column('installed_version', sa.String(length=60), nullable=True),
    sa.Column('auto_install', sa.Boolean(), nullable=True),
    sa.Column('state', sa.String(length=60), nullable=True),
    sa.Column('icon', sa.String(length=60), nullable=True),
    sa.Column('enable', sa.Boolean(), nullable=True),
    sa.Column('summary', sa.String(length=350), nullable=True),
    sa.Column('category_id', sa.Integer(), nullable=True),
    sa.Column('user_groups_api', sa.Text(), nullable=True),
    sa.Column('models_api', sa.Text(), nullable=True),
    sa.Column('url', sa.String(length=120), nullable=True),
    sa.ForeignKeyConstraint(['category_id'], ['module_category.id'], name=op.f('fk_module_category_id_module_category')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_module'))
    )
    with op.batch_alter_table('module', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_module_bp_name'), ['bp_name'], unique=False)
        batch_op.create_index(batch_op.f('ix_module_official_name'), ['official_name'], unique=False)
        batch_op.create_index(batch_op.f('ix_module_technical_name'), ['technical_name'], unique=False)

    op.create_table('uom',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(length=120), nullable=False),
    sa.Column('category_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.ForeignKeyConstraint(['category_id'], ['uom_category.id'], name=op.f('fk_uom_category_id_uom_category')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_uom'))
    )
    op.create_table('city',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=60), nullable=True),
    sa.Column('geonameid', sa.Integer(), nullable=True),
    sa.Column('country_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['country_id'], ['country.id'], name=op.f('fk_city_country_id_country')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_city')),
    sa.UniqueConstraint('geonameid', name=op.f('uq_city_geonameid'))
    )
    with op.batch_alter_table('city', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_city_name'), ['name'], unique=False)

    op.create_table('group',
    sa.Column('id', sa.String(length=128), nullable=False),
    sa.Column('name', sa.String(length=128), nullable=True),
    sa.Column('slug', sa.Text(), nullable=True),
    sa.Column('module_id', sa.Integer(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_on', sa.DateTime(), nullable=True),
    sa.Column('permission', sa.Integer(), nullable=True),
    sa.Column('access_rights_url', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['module_id'], ['module.id'], name=op.f('fk_group_module_id_module')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_group')),
    sa.UniqueConstraint('slug', name=op.f('uq_group_slug'))
    )
    with op.batch_alter_table('group', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_group_name'), ['name'], unique=False)

    op.create_table('model',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=128), nullable=True),
    sa.Column('description', sa.String(length=128), nullable=True),
    sa.Column('slug', sa.Text(), nullable=True),
    sa.Column('module_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['module_id'], ['module.id'], name=op.f('fk_model_module_id_module')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_model')),
    sa.UniqueConstraint('slug', name=op.f('uq_model_slug'))
    )
    with op.batch_alter_table('model', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_model_name'), ['name'], unique=True)

    op.create_table('ModuleModels',
    sa.Column('module_id', sa.Integer(), nullable=False),
    sa.Column('model_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['model_id'], ['model.id'], name=op.f('fk_ModuleModels_model_id_model')),
    sa.ForeignKeyConstraint(['module_id'], ['module.id'], name=op.f('fk_ModuleModels_module_id_module')),
    sa.PrimaryKeyConstraint('module_id', 'model_id', name=op.f('pk_ModuleModels'))
    )
    op.create_table('access',
    sa.Column('id', sa.String(length=128), nullable=False),
    sa.Column('name', sa.String(length=120), nullable=True),
    sa.Column('model_id', sa.Integer(), nullable=True),
    sa.Column('slug', sa.Text(), nullable=True),
    sa.Column('read', sa.Boolean(), nullable=True),
    sa.Column('write', sa.Boolean(), nullable=True),
    sa.Column('create', sa.Boolean(), nullable=True),
    sa.Column('delete', sa.Boolean(), nullable=True),
    sa.Column('created_on', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['model_id'], ['model.id'], name=op.f('fk_access_model_id_model')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_access')),
    sa.UniqueConstraint('slug', name=op.f('uq_access_slug'))
    )
    with op.batch_alter_table('access', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_access_name'), ['name'], unique=False)

    op.create_table('activity_type',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=True),
    sa.Column('model_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['model_id'], ['model.id'], name=op.f('fk_activity_type_model_id_model')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_activity_type'))
    )
    with op.batch_alter_table('activity_type', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_activity_type_name'), ['name'], unique=False)

    op.create_table('partner',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(length=120), nullable=True),
    sa.Column('company_name', sa.String(length=120), nullable=True),
    sa.Column('email', sa.String(length=120), nullable=True),
    sa.Column('function', sa.String(length=60), nullable=True),
    sa.Column('date_added', sa.DateTime(), nullable=True),
    sa.Column('dob', sa.Date(), nullable=True),
    sa.Column('is_individual', sa.Boolean(), nullable=True),
    sa.Column('is_company', sa.Boolean(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=True),
    sa.Column('phone_no', sa.String(length=120), nullable=True),
    sa.Column('parent_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('title_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('position_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('website', sa.String(length=120), nullable=True),
    sa.Column('postal_code', sa.String(length=120), nullable=True),
    sa.Column('postal_address', sa.String(length=120), nullable=True),
    sa.Column('city_id', sa.Integer(), nullable=True),
    sa.Column('country_id', sa.Integer(), nullable=True),
    sa.Column('company_id', sa.Integer(), nullable=True),
    sa.Column('is_tenant', sa.Boolean(), nullable=True),
    sa.Column('tax_id', sa.String(length=60), nullable=True),
    sa.Column('slug', sa.Text(), nullable=True),
    sa.Column('is_archived', sa.Boolean(), nullable=True),
    sa.Column('contact_person', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['city_id'], ['city.id'], name=op.f('fk_partner_city_id_city')),
    sa.ForeignKeyConstraint(['company_id'], ['company.id'], name=op.f('fk_partner_company_id_company')),
    sa.ForeignKeyConstraint(['country_id'], ['country.id'], name=op.f('fk_partner_country_id_country')),
    sa.ForeignKeyConstraint(['parent_id'], ['partner.id'], name=op.f('fk_partner_parent_id_partner')),
    sa.ForeignKeyConstraint(['position_id'], ['partner_position.id'], name=op.f('fk_partner_position_id_partner_position')),
    sa.ForeignKeyConstraint(['title_id'], ['partner_title.id'], name=op.f('fk_partner_title_id_partner_title')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_partner')),
    sa.UniqueConstraint('slug', name=op.f('uq_partner_slug'))
    )
    with op.batch_alter_table('partner', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_partner_company_name'), ['company_name'], unique=False)
        batch_op.create_index(batch_op.f('ix_partner_email'), ['email'], unique=False)
        batch_op.create_index(batch_op.f('ix_partner_function'), ['function'], unique=False)
        batch_op.create_index(batch_op.f('ix_partner_name'), ['name'], unique=False)
        batch_op.create_index(batch_op.f('ix_partner_phone_no'), ['phone_no'], unique=False)
        batch_op.create_index(batch_op.f('ix_partner_postal_address'), ['postal_address'], unique=False)
        batch_op.create_index(batch_op.f('ix_partner_postal_code'), ['postal_code'], unique=False)
        batch_op.create_index(batch_op.f('ix_partner_tax_id'), ['tax_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_partner_website'), ['website'], unique=False)

    op.create_table('AccessRights',
    sa.Column('group_id', sa.String(length=128), nullable=False),
    sa.Column('access_id', sa.String(length=128), nullable=False),
    sa.ForeignKeyConstraint(['access_id'], ['access.id'], name=op.f('fk_AccessRights_access_id_access')),
    sa.ForeignKeyConstraint(['group_id'], ['group.id'], name=op.f('fk_AccessRights_group_id_group')),
    sa.PrimaryKeyConstraint('group_id', 'access_id', name=op.f('pk_AccessRights'))
    )
    op.create_table('PartnerRoles',
    sa.Column('partner_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['partner_id'], ['partner.id'], name=op.f('fk_PartnerRoles_partner_id_partner')),
    sa.ForeignKeyConstraint(['role_id'], ['partner_role.id'], name=op.f('fk_PartnerRoles_role_id_partner_role')),
    sa.PrimaryKeyConstraint('partner_id', 'role_id', name=op.f('pk_PartnerRoles'))
    )
    op.create_table('PartnerTags',
    sa.Column('partner_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('partner_tag_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.ForeignKeyConstraint(['partner_id'], ['partner.id'], name=op.f('fk_PartnerTags_partner_id_partner')),
    sa.ForeignKeyConstraint(['partner_tag_id'], ['partner_tag.id'], name=op.f('fk_PartnerTags_partner_tag_id_partner_tag')),
    sa.PrimaryKeyConstraint('partner_id', 'partner_tag_id', name=op.f('pk_PartnerTags'))
    )
    op.create_table('activity',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('summary', sa.String(length=300), nullable=True),
    sa.Column('module_id', sa.Integer(), nullable=True),
    sa.Column('model_id', sa.Integer(), nullable=True),
    sa.Column('activity_type', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('due_date', sa.Date(), nullable=True),
    sa.Column('assigned_to', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['activity_type'], ['activity_type.id'], name=op.f('fk_activity_activity_type_activity_type')),
    sa.ForeignKeyConstraint(['assigned_to'], ['partner.id'], name=op.f('fk_activity_assigned_to_partner')),
    sa.ForeignKeyConstraint(['model_id'], ['model.id'], name=op.f('fk_activity_model_id_model')),
    sa.ForeignKeyConstraint(['module_id'], ['module.id'], name=op.f('fk_activity_module_id_module')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_activity'))
    )
    with op.batch_alter_table('activity', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_activity_summary'), ['summary'], unique=False)

    op.create_table('organization',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.ForeignKeyConstraint(['id'], ['partner.id'], name=op.f('fk_organization_id_partner')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_organization'))
    )
    op.create_table('partner_team',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=120), nullable=True),
    sa.Column('leader', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('token', sa.String(length=120), nullable=True),
    sa.Column('module_id', sa.Integer(), nullable=True),
    sa.Column('model_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['leader'], ['partner.id'], name=op.f('fk_partner_team_leader_partner')),
    sa.ForeignKeyConstraint(['model_id'], ['model.id'], name=op.f('fk_partner_team_model_id_model')),
    sa.ForeignKeyConstraint(['module_id'], ['module.id'], name=op.f('fk_partner_team_module_id_module')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_partner_team'))
    )
    with op.batch_alter_table('partner_team', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_partner_team_name'), ['name'], unique=True)
        batch_op.create_index(batch_op.f('ix_partner_team_token'), ['token'], unique=True)

    op.create_table('PartnerTeams',
    sa.Column('partner_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('team_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['partner_id'], ['partner.id'], name=op.f('fk_PartnerTeams_partner_id_partner')),
    sa.ForeignKeyConstraint(['team_id'], ['partner_team.id'], name=op.f('fk_PartnerTeams_team_id_partner_team')),
    sa.PrimaryKeyConstraint('partner_id', 'team_id', name=op.f('pk_PartnerTeams'))
    )
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('partner_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('company_id', sa.Integer(), nullable=True),
    sa.Column('team_id', sa.Integer(), nullable=True),
    sa.Column('token', sa.String(length=120), nullable=True),
    sa.Column('token_expiration', sa.DateTime(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('is_archived', sa.Boolean(), nullable=True),
    sa.Column('is_staff', sa.Boolean(), nullable=True),
    sa.Column('last_seen', sa.DateTime(), nullable=True),
    sa.Column('registered_on', sa.DateTime(), nullable=True),
    sa.Column('password_hash', sa.String(length=128), nullable=True),
    sa.Column('country_code', sa.String(length=10), nullable=True),
    sa.Column('slug', sa.Text(), nullable=True),
    sa.Column('user_type', sa.String(length=120), nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['company.id'], name=op.f('fk_users_company_id_company')),
    sa.ForeignKeyConstraint(['partner_id'], ['partner.id'], name=op.f('fk_users_partner_id_partner')),
    sa.ForeignKeyConstraint(['team_id'], ['partner_team.id'], name=op.f('fk_users_team_id_partner_team')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_users')),
    sa.UniqueConstraint('slug', name=op.f('uq_users_slug'))
    )
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_users_country_code'), ['country_code'], unique=False)
        batch_op.create_index(batch_op.f('ix_users_token'), ['token'], unique=True)

    op.create_table('UserAccess',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('access_id', sa.String(length=128), nullable=False),
    sa.ForeignKeyConstraint(['access_id'], ['access.id'], name=op.f('fk_UserAccess_access_id_access')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_UserAccess_user_id_users')),
    sa.PrimaryKeyConstraint('user_id', 'access_id', name=op.f('pk_UserAccess'))
    )
    op.create_table('UserGroup',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('group_id', sa.String(length=128), nullable=False),
    sa.ForeignKeyConstraint(['group_id'], ['group.id'], name=op.f('fk_UserGroup_group_id_group')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_UserGroup_user_id_users')),
    sa.PrimaryKeyConstraint('user_id', 'group_id', name=op.f('pk_UserGroup'))
    )
    op.create_table('lead',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=120), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('company_id', sa.Integer(), nullable=True),
    sa.Column('plan_id', sa.Integer(), nullable=True),
    sa.Column('referred_by', sa.String(length=120), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('active', sa.Boolean(), nullable=True),
    sa.Column('priority', sa.String(length=15), nullable=True),
    sa.Column('partner_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('stage_id', sa.Integer(), nullable=True),
    sa.Column('expected_revenue', sa.String(length=60), nullable=True),
    sa.Column('date_open', sa.DateTime(), nullable=True),
    sa.Column('expected_closing', sa.DateTime(), nullable=True),
    sa.Column('partner_email', sa.String(length=120), nullable=True),
    sa.Column('partner_phone', sa.String(length=60), nullable=True),
    sa.Column('partner_currency', sa.String(length=10), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=True),
    sa.Column('slug', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['company.id'], name=op.f('fk_lead_company_id_company')),
    sa.ForeignKeyConstraint(['partner_id'], ['partner.id'], name=op.f('fk_lead_partner_id_partner')),
    sa.ForeignKeyConstraint(['plan_id'], ['recurring_plan.id'], name=op.f('fk_lead_plan_id_recurring_plan')),
    sa.ForeignKeyConstraint(['stage_id'], ['stage.id'], name=op.f('fk_lead_stage_id_stage')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_lead_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_lead')),
    sa.UniqueConstraint('slug', name=op.f('uq_lead_slug'))
    )
    with op.batch_alter_table('lead', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_lead_name'), ['name'], unique=False)
        batch_op.create_index(batch_op.f('ix_lead_partner_currency'), ['partner_currency'], unique=False)
        batch_op.create_index(batch_op.f('ix_lead_partner_email'), ['partner_email'], unique=False)
        batch_op.create_index(batch_op.f('ix_lead_partner_phone'), ['partner_phone'], unique=False)
        batch_op.create_index(batch_op.f('ix_lead_priority'), ['priority'], unique=False)

    op.create_table('product_category',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(length=120), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('created_by', sa.Integer(), nullable=True),
    sa.Column('created_on', sa.DateTime(), nullable=True),
    sa.Column('updated_by', sa.Integer(), nullable=True),
    sa.Column('updated_on', sa.DateTime(), nullable=True),
    sa.Column('deleted_by', sa.Integer(), nullable=True),
    sa.Column('deleted_on', sa.DateTime(), nullable=True),
    sa.Column('deleted', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('fk_product_category_created_by_users')),
    sa.ForeignKeyConstraint(['deleted_by'], ['users.id'], name=op.f('fk_product_category_deleted_by_users')),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], name=op.f('fk_product_category_updated_by_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_product_category'))
    )
    with op.batch_alter_table('product_category', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_product_category_name'), ['name'], unique=False)

    op.create_table('purchase',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('reference', sa.String(length=120), nullable=True),
    sa.Column('vendor', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('representative', sa.Integer(), nullable=True),
    sa.Column('due_date', sa.Date(), nullable=True),
    sa.Column('time', sa.String(length=10), nullable=True),
    sa.Column('total', sa.String(length=120), nullable=True),
    sa.Column('status', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('unit_price', sa.Float(), nullable=True),
    sa.Column('quantity', sa.Integer(), nullable=True),
    sa.Column('created_on', sa.DateTime(), nullable=True),
    sa.Column('updated_on', sa.DateTime(), nullable=True),
    sa.Column('active', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['representative'], ['users.id'], name=op.f('fk_purchase_representative_users')),
    sa.ForeignKeyConstraint(['status'], ['purchase_status.id'], name=op.f('fk_purchase_status_purchase_status')),
    sa.ForeignKeyConstraint(['vendor'], ['partner.id'], name=op.f('fk_purchase_vendor_partner')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_purchase'))
    )
    with op.batch_alter_table('purchase', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_purchase_reference'), ['reference'], unique=True)
        batch_op.create_index(batch_op.f('ix_purchase_total'), ['total'], unique=False)

    op.create_table('task',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('name', sa.String(length=128), nullable=True),
    sa.Column('description', sa.String(length=128), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('complete', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_task_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_task'))
    )
    with op.batch_alter_table('task', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_task_name'), ['name'], unique=False)

    op.create_table('lead_activity',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('lead_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['id'], ['activity.id'], name=op.f('fk_lead_activity_id_activity')),
    sa.ForeignKeyConstraint(['lead_id'], ['lead.id'], name=op.f('fk_lead_activity_lead_id_lead')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_lead_activity'))
    )
    op.create_table('note',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('note', sa.Text(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('lead_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['lead_id'], ['lead.id'], name=op.f('fk_note_lead_id_lead')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_note_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_note'))
    )
    op.create_table('product',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=True),
    sa.Column('manufacturer_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('model_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('cost', sa.Float(), nullable=True),
    sa.Column('price', sa.Float(), nullable=True),
    sa.Column('tax_rate', sa.Float(), nullable=True),
    sa.Column('category_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('screen_size', sa.String(length=10), nullable=True),
    sa.Column('screen', sa.String(length=50), nullable=True),
    sa.Column('processor_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('memory_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('storage_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('gpu', sa.String(length=50), nullable=True),
    sa.Column('os', sa.String(length=50), nullable=True),
    sa.Column('os_version', sa.String(length=50), nullable=True),
    sa.Column('weight', sa.String(length=50), nullable=True),
    sa.Column('created_by', sa.Integer(), nullable=True),
    sa.Column('approved_for_sale_by', sa.Integer(), nullable=True),
    sa.Column('created_on', sa.DateTime(), nullable=True),
    sa.Column('updated_by', sa.Integer(), nullable=True),
    sa.Column('updated_on', sa.DateTime(), nullable=True),
    sa.Column('deleted_by', sa.Integer(), nullable=True),
    sa.Column('deleted_on', sa.DateTime(), nullable=True),
    sa.Column('deleted', sa.Boolean(), nullable=True),
    sa.Column('approved_for_sale', sa.Boolean(), nullable=True),
    sa.Column('in_stock', sa.Boolean(), nullable=True),
    sa.Column('sku', sa.String(length=120), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('color', sa.String(length=50), nullable=True),
    sa.ForeignKeyConstraint(['approved_for_sale_by'], ['users.id'], name=op.f('fk_product_approved_for_sale_by_users')),
    sa.ForeignKeyConstraint(['category_id'], ['product_category.id'], name=op.f('fk_product_category_id_product_category')),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('fk_product_created_by_users')),
    sa.ForeignKeyConstraint(['deleted_by'], ['users.id'], name=op.f('fk_product_deleted_by_users')),
    sa.ForeignKeyConstraint(['manufacturer_id'], ['product_manufacturer.id'], name=op.f('fk_product_manufacturer_id_product_manufacturer')),
    sa.ForeignKeyConstraint(['memory_id'], ['memory.id'], name=op.f('fk_product_memory_id_memory')),
    sa.ForeignKeyConstraint(['model_id'], ['product_model.id'], name=op.f('fk_product_model_id_product_model')),
    sa.ForeignKeyConstraint(['processor_id'], ['processor.id'], name=op.f('fk_product_processor_id_processor')),
    sa.ForeignKeyConstraint(['storage_id'], ['storage.id'], name=op.f('fk_product_storage_id_storage')),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], name=op.f('fk_product_updated_by_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_product'))
    )
    with op.batch_alter_table('product', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_product_color'), ['color'], unique=False)
        batch_op.create_index(batch_op.f('ix_product_gpu'), ['gpu'], unique=False)
        batch_op.create_index(batch_op.f('ix_product_os'), ['os'], unique=False)
        batch_op.create_index(batch_op.f('ix_product_os_version'), ['os_version'], unique=False)
        batch_op.create_index(batch_op.f('ix_product_screen'), ['screen'], unique=False)
        batch_op.create_index(batch_op.f('ix_product_screen_size'), ['screen_size'], unique=False)
        batch_op.create_index(batch_op.f('ix_product_sku'), ['sku'], unique=True)
        batch_op.create_index(batch_op.f('ix_product_weight'), ['weight'], unique=False)

    op.create_table('purchase_activity',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('purchase_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.ForeignKeyConstraint(['id'], ['activity.id'], name=op.f('fk_purchase_activity_id_activity')),
    sa.ForeignKeyConstraint(['purchase_id'], ['purchase.id'], name=op.f('fk_purchase_activity_purchase_id_purchase')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_purchase_activity'))
    )
    op.create_table('product_purchase',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('product_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('vendor_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('purchase_order_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.ForeignKeyConstraint(['product_id'], ['product.id'], name=op.f('fk_product_purchase_product_id_product')),
    sa.ForeignKeyConstraint(['purchase_order_id'], ['purchase.id'], name=op.f('fk_product_purchase_purchase_order_id_purchase')),
    sa.ForeignKeyConstraint(['vendor_id'], ['partner.id'], name=op.f('fk_product_purchase_vendor_id_partner')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_product_purchase'))
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('product_purchase')
    op.drop_table('purchase_activity')
    with op.batch_alter_table('product', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_product_weight'))
        batch_op.drop_index(batch_op.f('ix_product_sku'))
        batch_op.drop_index(batch_op.f('ix_product_screen_size'))
        batch_op.drop_index(batch_op.f('ix_product_screen'))
        batch_op.drop_index(batch_op.f('ix_product_os_version'))
        batch_op.drop_index(batch_op.f('ix_product_os'))
        batch_op.drop_index(batch_op.f('ix_product_gpu'))
        batch_op.drop_index(batch_op.f('ix_product_color'))

    op.drop_table('product')
    op.drop_table('note')
    op.drop_table('lead_activity')
    with op.batch_alter_table('task', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_task_name'))

    op.drop_table('task')
    with op.batch_alter_table('purchase', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_purchase_total'))
        batch_op.drop_index(batch_op.f('ix_purchase_reference'))

    op.drop_table('purchase')
    with op.batch_alter_table('product_category', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_product_category_name'))

    op.drop_table('product_category')
    with op.batch_alter_table('lead', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_lead_priority'))
        batch_op.drop_index(batch_op.f('ix_lead_partner_phone'))
        batch_op.drop_index(batch_op.f('ix_lead_partner_email'))
        batch_op.drop_index(batch_op.f('ix_lead_partner_currency'))
        batch_op.drop_index(batch_op.f('ix_lead_name'))

    op.drop_table('lead')
    op.drop_table('UserGroup')
    op.drop_table('UserAccess')
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_users_token'))
        batch_op.drop_index(batch_op.f('ix_users_country_code'))

    op.drop_table('users')
    op.drop_table('PartnerTeams')
    with op.batch_alter_table('partner_team', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_partner_team_token'))
        batch_op.drop_index(batch_op.f('ix_partner_team_name'))

    op.drop_table('partner_team')
    op.drop_table('organization')
    with op.batch_alter_table('activity', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_activity_summary'))

    op.drop_table('activity')
    op.drop_table('PartnerTags')
    op.drop_table('PartnerRoles')
    op.drop_table('AccessRights')
    with op.batch_alter_table('partner', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_partner_website'))
        batch_op.drop_index(batch_op.f('ix_partner_tax_id'))
        batch_op.drop_index(batch_op.f('ix_partner_postal_code'))
        batch_op.drop_index(batch_op.f('ix_partner_postal_address'))
        batch_op.drop_index(batch_op.f('ix_partner_phone_no'))
        batch_op.drop_index(batch_op.f('ix_partner_name'))
        batch_op.drop_index(batch_op.f('ix_partner_function'))
        batch_op.drop_index(batch_op.f('ix_partner_email'))
        batch_op.drop_index(batch_op.f('ix_partner_company_name'))

    op.drop_table('partner')
    with op.batch_alter_table('activity_type', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_activity_type_name'))

    op.drop_table('activity_type')
    with op.batch_alter_table('access', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_access_name'))

    op.drop_table('access')
    op.drop_table('ModuleModels')
    with op.batch_alter_table('model', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_model_name'))

    op.drop_table('model')
    with op.batch_alter_table('group', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_group_name'))

    op.drop_table('group')
    with op.batch_alter_table('city', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_city_name'))

    op.drop_table('city')
    op.drop_table('uom')
    with op.batch_alter_table('module', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_module_technical_name'))
        batch_op.drop_index(batch_op.f('ix_module_official_name'))
        batch_op.drop_index(batch_op.f('ix_module_bp_name'))

    op.drop_table('module')
    with op.batch_alter_table('country', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_country_name'))
        batch_op.drop_index(batch_op.f('ix_country_languages'))
        batch_op.drop_index(batch_op.f('ix_country_currency_numeric_code'))
        batch_op.drop_index(batch_op.f('ix_country_currency_name'))
        batch_op.drop_index(batch_op.f('ix_country_currency_alphabetic_code'))
        batch_op.drop_index(batch_op.f('ix_country_code'))
        batch_op.drop_index(batch_op.f('ix_country_calling_code'))

    op.drop_table('country')
    with op.batch_alter_table('company', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_company_website'))
        batch_op.drop_index(batch_op.f('ix_company_name'))
        batch_op.drop_index(batch_op.f('ix_company_mobile_no'))
        batch_op.drop_index(batch_op.f('ix_company_email'))
        batch_op.drop_index(batch_op.f('ix_company_domain_name'))

    op.drop_table('company')
    op.drop_table('uom_category')
    with op.batch_alter_table('storage', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_storage_name'))

    op.drop_table('storage')
    with op.batch_alter_table('stage', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_stage_name'))

    op.drop_table('stage')
    op.drop_table('recurring_plan')
    with op.batch_alter_table('purchase_status', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_purchase_status_name'))

    op.drop_table('purchase_status')
    with op.batch_alter_table('purchase_filters', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_purchase_filters_name'))
        batch_op.drop_index(batch_op.f('ix_purchase_filters_index'))

    op.drop_table('purchase_filters')
    op.drop_table('product_model')
    op.drop_table('product_manufacturer')
    with op.batch_alter_table('processor_speed', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_processor_speed_name'))

    op.drop_table('processor_speed')
    with op.batch_alter_table('processor', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_processor_name'))

    op.drop_table('processor')
    with op.batch_alter_table('partner_title', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_partner_title_name'))

    op.drop_table('partner_title')
    with op.batch_alter_table('partner_tag', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_partner_tag_name'))

    op.drop_table('partner_tag')
    with op.batch_alter_table('partner_role', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_partner_role_name'))

    op.drop_table('partner_role')
    with op.batch_alter_table('partner_position', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_partner_position_name'))

    op.drop_table('partner_position')
    op.drop_table('module_category')
    with op.batch_alter_table('memory_type', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_memory_type_name'))

    op.drop_table('memory_type')
    with op.batch_alter_table('memory', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_memory_name'))

    op.drop_table('memory')
    with op.batch_alter_table('instruction_set', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_instruction_set_name'))

    op.drop_table('instruction_set')
    with op.batch_alter_table('database', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_database_name'))

    op.drop_table('database')
    with op.batch_alter_table('currency', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_currency_name'))
        batch_op.drop_index(batch_op.f('ix_currency_code'))

    op.drop_table('currency')
    with op.batch_alter_table('cores', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_cores_name'))

    op.drop_table('cores')
    with op.batch_alter_table('company_category', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_company_category_name'))

    op.drop_table('company_category')
    # ### end Alembic commands ###
