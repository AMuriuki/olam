"""empty message

Revision ID: ba3517795870
Revises: 3a3ba2e8fbe9
Create Date: 2022-05-06 00:33:14.521885

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'ba3517795870'
down_revision = '3a3ba2e8fbe9'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('attribute_value',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(length=120), nullable=True),
    sa.Column('attribute_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.ForeignKeyConstraint(['attribute_id'], ['product_attribute.id'], name=op.f('fk_attribute_value_attribute_id_product_attribute')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_attribute_value'))
    )
    with op.batch_alter_table('attribute_value', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_attribute_value_name'), ['name'], unique=False)

    with op.batch_alter_table('product_attribute_value', schema=None) as batch_op:
        batch_op.drop_index('ix_product_attribute_value_name')

    op.drop_table('product_attribute_value')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('product_attribute_value',
    sa.Column('id', postgresql.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=120), autoincrement=False, nullable=True),
    sa.Column('attribute_id', postgresql.UUID(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['attribute_id'], ['product_attribute.id'], name='fk_product_attribute_value_attribute_id_product_attribute'),
    sa.PrimaryKeyConstraint('id', name='pk_product_attribute_value')
    )
    with op.batch_alter_table('product_attribute_value', schema=None) as batch_op:
        batch_op.create_index('ix_product_attribute_value_name', ['name'], unique=False)

    with op.batch_alter_table('attribute_value', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_attribute_value_name'))

    op.drop_table('attribute_value')
    # ### end Alembic commands ###
